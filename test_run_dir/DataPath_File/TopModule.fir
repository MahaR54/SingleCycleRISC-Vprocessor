;buildInfoPackage: chisel3, version: 3.4.3, scalaVersion: 2.12.12, sbtVersion: 1.3.10
circuit TopModule : 
  module Pc : 
    input clock : Clock
    input reset : Reset
    output io : {flip enb : UInt<1>, flip in : UInt<32>, out : UInt<32>}
    
    reg pcs : UInt<32>, clock with : (reset => (reset, UInt<32>("h00"))) @[Pc.scala 11:24]
    node _pc_buffer_T = add(pcs, io.in) @[Pc.scala 12:45]
    node _pc_buffer_T_1 = tail(_pc_buffer_T, 1) @[Pc.scala 12:45]
    node pc_buffer = mux(io.enb, io.in, _pc_buffer_T_1) @[Pc.scala 12:25]
    pcs <= pc_buffer @[Pc.scala 13:10]
    io.out <= pcs @[Pc.scala 14:13]
    
  module RagFile : 
    input clock : Clock
    input reset : Reset
    output io : {flip rs1 : UInt<5>, flip rs2 : UInt<5>, flip rd : UInt<5>, flip Wback : SInt<32>, flip writeEnable : UInt<1>, read_rs1 : SInt<32>, read_rs2 : SInt<32>}
    
    wire _regs_WIRE : SInt<32>[32] @[RegFile.scala 16:30]
    _regs_WIRE[0] <= asSInt(UInt<32>("h00")) @[RegFile.scala 16:30]
    _regs_WIRE[1] <= asSInt(UInt<32>("h00")) @[RegFile.scala 16:30]
    _regs_WIRE[2] <= asSInt(UInt<32>("h00")) @[RegFile.scala 16:30]
    _regs_WIRE[3] <= asSInt(UInt<32>("h00")) @[RegFile.scala 16:30]
    _regs_WIRE[4] <= asSInt(UInt<32>("h00")) @[RegFile.scala 16:30]
    _regs_WIRE[5] <= asSInt(UInt<32>("h00")) @[RegFile.scala 16:30]
    _regs_WIRE[6] <= asSInt(UInt<32>("h00")) @[RegFile.scala 16:30]
    _regs_WIRE[7] <= asSInt(UInt<32>("h00")) @[RegFile.scala 16:30]
    _regs_WIRE[8] <= asSInt(UInt<32>("h00")) @[RegFile.scala 16:30]
    _regs_WIRE[9] <= asSInt(UInt<32>("h00")) @[RegFile.scala 16:30]
    _regs_WIRE[10] <= asSInt(UInt<32>("h00")) @[RegFile.scala 16:30]
    _regs_WIRE[11] <= asSInt(UInt<32>("h00")) @[RegFile.scala 16:30]
    _regs_WIRE[12] <= asSInt(UInt<32>("h00")) @[RegFile.scala 16:30]
    _regs_WIRE[13] <= asSInt(UInt<32>("h00")) @[RegFile.scala 16:30]
    _regs_WIRE[14] <= asSInt(UInt<32>("h00")) @[RegFile.scala 16:30]
    _regs_WIRE[15] <= asSInt(UInt<32>("h00")) @[RegFile.scala 16:30]
    _regs_WIRE[16] <= asSInt(UInt<32>("h00")) @[RegFile.scala 16:30]
    _regs_WIRE[17] <= asSInt(UInt<32>("h00")) @[RegFile.scala 16:30]
    _regs_WIRE[18] <= asSInt(UInt<32>("h00")) @[RegFile.scala 16:30]
    _regs_WIRE[19] <= asSInt(UInt<32>("h00")) @[RegFile.scala 16:30]
    _regs_WIRE[20] <= asSInt(UInt<32>("h00")) @[RegFile.scala 16:30]
    _regs_WIRE[21] <= asSInt(UInt<32>("h00")) @[RegFile.scala 16:30]
    _regs_WIRE[22] <= asSInt(UInt<32>("h00")) @[RegFile.scala 16:30]
    _regs_WIRE[23] <= asSInt(UInt<32>("h00")) @[RegFile.scala 16:30]
    _regs_WIRE[24] <= asSInt(UInt<32>("h00")) @[RegFile.scala 16:30]
    _regs_WIRE[25] <= asSInt(UInt<32>("h00")) @[RegFile.scala 16:30]
    _regs_WIRE[26] <= asSInt(UInt<32>("h00")) @[RegFile.scala 16:30]
    _regs_WIRE[27] <= asSInt(UInt<32>("h00")) @[RegFile.scala 16:30]
    _regs_WIRE[28] <= asSInt(UInt<32>("h00")) @[RegFile.scala 16:30]
    _regs_WIRE[29] <= asSInt(UInt<32>("h00")) @[RegFile.scala 16:30]
    _regs_WIRE[30] <= asSInt(UInt<32>("h00")) @[RegFile.scala 16:30]
    _regs_WIRE[31] <= asSInt(UInt<32>("h00")) @[RegFile.scala 16:30]
    reg regs : SInt<32>[32], clock with : (reset => (reset, _regs_WIRE)) @[RegFile.scala 16:22]
    node _T = orr(io.rs1) @[RegFile.scala 17:18]
    when _T : @[RegFile.scala 17:22]
      io.read_rs1 <= regs[io.rs1] @[RegFile.scala 18:21]
      skip @[RegFile.scala 17:22]
    else : @[RegFile.scala 19:16]
      io.read_rs1 <= asSInt(UInt<1>("h00")) @[RegFile.scala 20:21]
      skip @[RegFile.scala 19:16]
    node _T_1 = orr(io.rs2) @[RegFile.scala 23:17]
    when _T_1 : @[RegFile.scala 23:21]
      io.read_rs2 <= regs[io.rs2] @[RegFile.scala 24:21]
      skip @[RegFile.scala 23:21]
    else : @[RegFile.scala 25:16]
      io.read_rs2 <= asSInt(UInt<1>("h00")) @[RegFile.scala 26:21]
      skip @[RegFile.scala 25:16]
    node _T_2 = eq(io.writeEnable, UInt<1>("h01")) @[RegFile.scala 29:24]
    node _T_3 = orr(io.rd) @[RegFile.scala 29:40]
    node _T_4 = and(_T_2, _T_3) @[RegFile.scala 29:31]
    when _T_4 : @[RegFile.scala 29:44]
      regs[io.rd] <= io.Wback @[RegFile.scala 30:21]
      skip @[RegFile.scala 29:44]
    
  module InstMem : 
    input clock : Clock
    input reset : Reset
    output io : {flip address : UInt<32>, flip data_in : SInt<32>, flip enb : UInt<1>, data_out : UInt<32>}
    
    cmem mem : UInt<32>[1024] @[InstrMem.scala 15:16]
    node _io_data_out_T = dshr(io.address, UInt<2>("h02")) @[InstrMem.scala 25:32]
    node _io_data_out_T_1 = bits(_io_data_out_T, 9, 0) @[InstrMem.scala 25:21]
    infer mport io_data_out_MPORT = mem[_io_data_out_T_1], clock @[InstrMem.scala 25:21]
    io.data_out <= io_data_out_MPORT @[InstrMem.scala 25:15]
    
  module ALU : 
    input clock : Clock
    input reset : Reset
    output io : {flip opcode : UInt<7>, flip in_A : SInt<32>, flip in_B : SInt<32>, flip alu_Op : UInt<4>, out : SInt<32>}
    
    io.out <= asSInt(UInt<1>("h00")) @[ALU.scala 40:12]
    node _T = eq(io.opcode, UInt<6>("h033")) @[ALU.scala 42:23]
    node _T_1 = eq(io.opcode, UInt<5>("h013")) @[ALU.scala 42:55]
    node _T_2 = or(_T, _T_1) @[ALU.scala 42:41]
    when _T_2 : @[ALU.scala 42:74]
      node _T_3 = eq(io.alu_Op, UInt<4>("h00")) @[ALU.scala 43:22]
      when _T_3 : @[ALU.scala 43:36]
        node _io_out_T = add(io.in_A, io.in_B) @[ALU.scala 44:27]
        node _io_out_T_1 = tail(_io_out_T, 1) @[ALU.scala 44:27]
        node _io_out_T_2 = asSInt(_io_out_T_1) @[ALU.scala 44:27]
        io.out <= _io_out_T_2 @[ALU.scala 44:16]
        skip @[ALU.scala 43:36]
      else : @[ALU.scala 46:39]
        node _T_4 = eq(io.alu_Op, UInt<4>("h06")) @[ALU.scala 46:26]
        when _T_4 : @[ALU.scala 46:39]
          node _io_out_T_3 = or(io.in_A, io.in_B) @[ALU.scala 47:27]
          node _io_out_T_4 = asSInt(_io_out_T_3) @[ALU.scala 47:27]
          io.out <= _io_out_T_4 @[ALU.scala 47:16]
          skip @[ALU.scala 46:39]
        else : @[ALU.scala 49:40]
          node _T_5 = eq(io.alu_Op, UInt<4>("h07")) @[ALU.scala 49:25]
          when _T_5 : @[ALU.scala 49:40]
            node _io_out_T_5 = and(io.in_A, io.in_B) @[ALU.scala 50:27]
            node _io_out_T_6 = asSInt(_io_out_T_5) @[ALU.scala 50:27]
            io.out <= _io_out_T_6 @[ALU.scala 50:16]
            skip @[ALU.scala 49:40]
          else : @[ALU.scala 52:39]
            node _T_6 = eq(io.alu_Op, UInt<4>("h08")) @[ALU.scala 52:25]
            when _T_6 : @[ALU.scala 52:39]
              node _io_out_T_7 = sub(io.in_A, io.in_B) @[ALU.scala 53:27]
              node _io_out_T_8 = tail(_io_out_T_7, 1) @[ALU.scala 53:27]
              node _io_out_T_9 = asSInt(_io_out_T_8) @[ALU.scala 53:27]
              io.out <= _io_out_T_9 @[ALU.scala 53:16]
              skip @[ALU.scala 52:39]
            else : @[ALU.scala 55:38]
              node _T_7 = eq(io.alu_Op, UInt<4>("h04")) @[ALU.scala 55:25]
              when _T_7 : @[ALU.scala 55:38]
                node _io_out_T_10 = xor(io.in_A, io.in_B) @[ALU.scala 56:27]
                node _io_out_T_11 = asSInt(_io_out_T_10) @[ALU.scala 56:27]
                io.out <= _io_out_T_11 @[ALU.scala 56:16]
                skip @[ALU.scala 55:38]
              else : @[ALU.scala 58:38]
                node _T_8 = eq(io.alu_Op, UInt<4>("h01")) @[ALU.scala 58:25]
                when _T_8 : @[ALU.scala 58:38]
                  node _io_out_T_12 = bits(io.in_B, 4, 0) @[ALU.scala 59:37]
                  node _io_out_T_13 = dshl(io.in_A, _io_out_T_12) @[ALU.scala 59:27]
                  io.out <= _io_out_T_13 @[ALU.scala 59:16]
                  skip @[ALU.scala 58:38]
                else : @[ALU.scala 61:38]
                  node _T_9 = eq(io.alu_Op, UInt<4>("h05")) @[ALU.scala 61:25]
                  when _T_9 : @[ALU.scala 61:38]
                    node _io_out_T_14 = bits(io.in_B, 4, 0) @[ALU.scala 62:36]
                    node _io_out_T_15 = dshr(io.in_A, _io_out_T_14) @[ALU.scala 62:26]
                    io.out <= _io_out_T_15 @[ALU.scala 62:15]
                    skip @[ALU.scala 61:38]
                  else : @[ALU.scala 64:38]
                    node _T_10 = eq(io.alu_Op, UInt<4>("h0d")) @[ALU.scala 64:25]
                    when _T_10 : @[ALU.scala 64:38]
                      node _io_out_T_16 = bits(io.in_B, 4, 0) @[ALU.scala 65:35]
                      node _io_out_T_17 = dshr(io.in_A, _io_out_T_16) @[ALU.scala 65:25]
                      io.out <= _io_out_T_17 @[ALU.scala 65:14]
                      skip @[ALU.scala 64:38]
                    else : @[ALU.scala 67:38]
                      node _T_11 = eq(io.alu_Op, UInt<4>("h02")) @[ALU.scala 67:25]
                      when _T_11 : @[ALU.scala 67:38]
                        node _io_out_T_18 = lt(io.in_A, io.in_B) @[ALU.scala 68:26]
                        node _io_out_T_19 = asSInt(_io_out_T_18) @[ALU.scala 68:37]
                        io.out <= _io_out_T_19 @[ALU.scala 68:14]
                        skip @[ALU.scala 67:38]
                      else : @[ALU.scala 70:40]
                        node _T_12 = eq(io.alu_Op, UInt<4>("h03")) @[ALU.scala 70:25]
                        when _T_12 : @[ALU.scala 70:40]
                          node _io_out_T_20 = lt(io.in_A, io.in_B) @[ALU.scala 71:27]
                          node _io_out_T_21 = asSInt(_io_out_T_20) @[ALU.scala 71:46]
                          io.out <= _io_out_T_21 @[ALU.scala 71:14]
                          skip @[ALU.scala 70:40]
                        else : @[ALU.scala 72:16]
                          io.out <= asSInt(UInt<1>("h00")) @[ALU.scala 73:13]
                          skip @[ALU.scala 72:16]
      skip @[ALU.scala 42:74]
    else : @[ALU.scala 77:43]
      node _T_13 = eq(io.opcode, UInt<2>("h03")) @[ALU.scala 77:25]
      when _T_13 : @[ALU.scala 77:43]
        node _io_out_T_22 = add(io.in_A, io.in_B) @[ALU.scala 78:25]
        node _io_out_T_23 = tail(_io_out_T_22, 1) @[ALU.scala 78:25]
        node _io_out_T_24 = asSInt(_io_out_T_23) @[ALU.scala 78:25]
        io.out <= _io_out_T_24 @[ALU.scala 78:14]
        skip @[ALU.scala 77:43]
      else : @[ALU.scala 81:43]
        node _T_14 = eq(io.opcode, UInt<7>("h067")) @[ALU.scala 81:25]
        when _T_14 : @[ALU.scala 81:43]
          io.out <= io.in_B @[ALU.scala 82:14]
          skip @[ALU.scala 81:43]
        else : @[ALU.scala 87:41]
          node _T_15 = eq(io.opcode, UInt<7>("h063")) @[ALU.scala 87:25]
          when _T_15 : @[ALU.scala 87:41]
            node _T_16 = eq(io.alu_Op, UInt<4>("h00")) @[ALU.scala 88:19]
            when _T_16 : @[ALU.scala 88:31]
              node _io_out_T_25 = eq(io.in_A, io.in_B) @[ALU.scala 89:28]
              node _io_out_T_26 = mux(_io_out_T_25, asSInt(UInt<2>("h01")), asSInt(UInt<1>("h00"))) @[ALU.scala 89:19]
              io.out <= _io_out_T_26 @[ALU.scala 89:14]
              skip @[ALU.scala 88:31]
            else : @[ALU.scala 90:37]
              node _T_17 = eq(io.alu_Op, UInt<4>("h01")) @[ALU.scala 90:25]
              when _T_17 : @[ALU.scala 90:37]
                node _io_out_T_27 = neq(io.in_A, io.in_B) @[ALU.scala 91:26]
                node _io_out_T_28 = mux(_io_out_T_27, asSInt(UInt<2>("h01")), asSInt(UInt<1>("h00"))) @[ALU.scala 91:17]
                io.out <= _io_out_T_28 @[ALU.scala 91:12]
                skip @[ALU.scala 90:37]
              else : @[ALU.scala 92:37]
                node _T_18 = eq(io.alu_Op, UInt<4>("h04")) @[ALU.scala 92:25]
                when _T_18 : @[ALU.scala 92:37]
                  node _io_out_T_29 = lt(io.in_A, io.in_B) @[ALU.scala 93:28]
                  node _io_out_T_30 = mux(_io_out_T_29, asSInt(UInt<2>("h01")), asSInt(UInt<1>("h00"))) @[ALU.scala 93:19]
                  io.out <= _io_out_T_30 @[ALU.scala 93:14]
                  skip @[ALU.scala 92:37]
                else : @[ALU.scala 94:37]
                  node _T_19 = eq(io.alu_Op, UInt<4>("h05")) @[ALU.scala 94:25]
                  when _T_19 : @[ALU.scala 94:37]
                    node _io_out_T_31 = geq(io.in_A, io.in_B) @[ALU.scala 95:28]
                    node _io_out_T_32 = mux(_io_out_T_31, asSInt(UInt<2>("h01")), asSInt(UInt<1>("h00"))) @[ALU.scala 95:19]
                    io.out <= _io_out_T_32 @[ALU.scala 95:14]
                    skip @[ALU.scala 94:37]
                  else : @[ALU.scala 96:37]
                    node _T_20 = eq(io.alu_Op, UInt<4>("h06")) @[ALU.scala 96:24]
                    when _T_20 : @[ALU.scala 96:37]
                      node _io_out_T_33 = asUInt(io.in_A) @[ALU.scala 97:28]
                      node _io_out_T_34 = asUInt(io.in_B) @[ALU.scala 97:45]
                      node _io_out_T_35 = lt(_io_out_T_33, _io_out_T_34) @[ALU.scala 97:35]
                      node _io_out_T_36 = mux(_io_out_T_35, asSInt(UInt<2>("h01")), asSInt(UInt<1>("h00"))) @[ALU.scala 97:19]
                      io.out <= _io_out_T_36 @[ALU.scala 97:14]
                      skip @[ALU.scala 96:37]
                    else : @[ALU.scala 98:37]
                      node _T_21 = eq(io.alu_Op, UInt<4>("h07")) @[ALU.scala 98:24]
                      when _T_21 : @[ALU.scala 98:37]
                        node _io_out_T_37 = asUInt(io.in_A) @[ALU.scala 99:28]
                        node _io_out_T_38 = asUInt(io.in_B) @[ALU.scala 99:46]
                        node _io_out_T_39 = geq(_io_out_T_37, _io_out_T_38) @[ALU.scala 99:35]
                        node _io_out_T_40 = mux(_io_out_T_39, asSInt(UInt<2>("h01")), asSInt(UInt<1>("h00"))) @[ALU.scala 99:19]
                        io.out <= _io_out_T_40 @[ALU.scala 99:14]
                        skip @[ALU.scala 98:37]
                      else : @[ALU.scala 100:15]
                        io.out <= asSInt(UInt<1>("h00")) @[ALU.scala 101:13]
                        skip @[ALU.scala 100:15]
            skip @[ALU.scala 87:41]
    
  module dataMem : 
    input clock : Clock
    input reset : Reset
    output io : {flip addr : UInt<8>, flip writeData : UInt<8>[4], flip enb : UInt<1>, flip fun3 : UInt<4>, flip mask : UInt<1>[4], flip store : UInt<1>, flip load : UInt<1>, readData : UInt<8>[4]}
    
    cmem mem : UInt<8>[4][1024] @[dataMem.scala 17:17]
    when io.store : @[dataMem.scala 18:19]
      write mport MPORT = mem[io.addr], clock
      when io.mask[0] :
        MPORT[0] <= io.writeData[0]
        skip
      when io.mask[1] :
        MPORT[1] <= io.writeData[1]
        skip
      when io.mask[2] :
        MPORT[2] <= io.writeData[2]
        skip
      when io.mask[3] :
        MPORT[3] <= io.writeData[3]
        skip
      skip @[dataMem.scala 18:19]
    infer mport MPORT_1 = mem[io.addr], clock @[dataMem.scala 21:21]
    io.readData[0] <= MPORT_1[0] @[dataMem.scala 21:15]
    io.readData[1] <= MPORT_1[1] @[dataMem.scala 21:15]
    io.readData[2] <= MPORT_1[2] @[dataMem.scala 21:15]
    io.readData[3] <= MPORT_1[3] @[dataMem.scala 21:15]
    
  module ImmGen : 
    input clock : Clock
    input reset : Reset
    output io : {flip ins : UInt<32>, imm : SInt<32>}
    
    io.imm <= asSInt(UInt<1>("h00")) @[ImmGen.scala 22:11]
    node _T = bits(io.ins, 6, 0) @[ImmGen.scala 23:19]
    node _T_1 = eq(UInt<32>("h013"), _T) @[Conditional.scala 37:30]
    when _T_1 : @[Conditional.scala 40:58]
      node _io_imm_T = bits(io.ins, 31, 31) @[ImmGen.scala 25:41]
      node _io_imm_T_1 = bits(_io_imm_T, 0, 0) @[Bitwise.scala 72:15]
      node io_imm_hi = mux(_io_imm_T_1, UInt<20>("h0fffff"), UInt<20>("h00")) @[Bitwise.scala 72:12]
      node io_imm_lo = bits(io.ins, 31, 20) @[ImmGen.scala 25:53]
      node _io_imm_T_2 = cat(io_imm_hi, io_imm_lo) @[Cat.scala 30:58]
      node _io_imm_T_3 = asSInt(_io_imm_T_2) @[ImmGen.scala 25:62]
      io.imm <= _io_imm_T_3 @[ImmGen.scala 25:19]
      skip @[Conditional.scala 40:58]
    else : @[Conditional.scala 39:67]
      node _T_2 = eq(UInt<32>("h023"), _T) @[Conditional.scala 37:30]
      when _T_2 : @[Conditional.scala 39:67]
        node io_imm_hi_1 = mux(UInt<1>("h00"), UInt<20>("h0fffff"), UInt<20>("h00")) @[Bitwise.scala 72:12]
        node io_imm_hi_2 = bits(io.ins, 31, 24) @[ImmGen.scala 28:51]
        node io_imm_lo_1 = bits(io.ins, 12, 7) @[ImmGen.scala 28:65]
        node io_imm_lo_2 = cat(io_imm_hi_2, io_imm_lo_1) @[Cat.scala 30:58]
        node _io_imm_T_4 = cat(io_imm_hi_1, io_imm_lo_2) @[Cat.scala 30:58]
        node _io_imm_T_5 = asSInt(_io_imm_T_4) @[ImmGen.scala 28:75]
        io.imm <= _io_imm_T_5 @[ImmGen.scala 28:19]
        skip @[Conditional.scala 39:67]
      else : @[Conditional.scala 39:67]
        node _T_3 = eq(UInt<32>("h063"), _T) @[Conditional.scala 37:30]
        when _T_3 : @[Conditional.scala 39:67]
          node io_imm_hi_3 = bits(io.ins, 31, 31) @[ImmGen.scala 31:37]
          node io_imm_lo_3 = bits(io.ins, 7, 7) @[ImmGen.scala 31:48]
          node io_imm_hi_4 = cat(io_imm_hi_3, io_imm_lo_3) @[Cat.scala 30:58]
          node io_imm_hi_5 = bits(io.ins, 30, 25) @[ImmGen.scala 31:63]
          node io_imm_lo_4 = bits(io.ins, 11, 8) @[ImmGen.scala 31:77]
          node io_imm_lo_5 = cat(io_imm_hi_5, io_imm_lo_4) @[Cat.scala 30:58]
          node _io_imm_T_6 = cat(io_imm_hi_4, io_imm_lo_5) @[Cat.scala 30:58]
          node _io_imm_T_7 = asSInt(_io_imm_T_6) @[ImmGen.scala 31:87]
          io.imm <= _io_imm_T_7 @[ImmGen.scala 31:19]
          skip @[Conditional.scala 39:67]
        else : @[Conditional.scala 39:67]
          node _T_4 = eq(UInt<32>("h037"), _T) @[Conditional.scala 37:30]
          when _T_4 : @[Conditional.scala 39:67]
            node _io_imm_T_8 = bits(io.ins, 31, 31) @[ImmGen.scala 34:40]
            node _io_imm_T_9 = bits(_io_imm_T_8, 0, 0) @[Bitwise.scala 72:15]
            node io_imm_hi_6 = mux(_io_imm_T_9, UInt<12>("h0fff"), UInt<12>("h00")) @[Bitwise.scala 72:12]
            node io_imm_lo_6 = bits(io.ins, 31, 12) @[ImmGen.scala 34:52]
            node _io_imm_T_10 = cat(io_imm_hi_6, io_imm_lo_6) @[Cat.scala 30:58]
            node _io_imm_T_11 = asSInt(_io_imm_T_10) @[ImmGen.scala 34:61]
            io.imm <= _io_imm_T_11 @[ImmGen.scala 34:19]
            skip @[Conditional.scala 39:67]
          else : @[Conditional.scala 39:67]
            node _T_5 = eq(UInt<32>("h03"), _T) @[Conditional.scala 37:30]
            when _T_5 : @[Conditional.scala 39:67]
              node io_imm_hi_7 = mux(UInt<1>("h00"), UInt<20>("h0fffff"), UInt<20>("h00")) @[Bitwise.scala 72:12]
              node io_imm_lo_7 = bits(io.ins, 31, 20) @[ImmGen.scala 37:47]
              node _io_imm_T_12 = cat(io_imm_hi_7, io_imm_lo_7) @[Cat.scala 30:58]
              node _io_imm_T_13 = asSInt(_io_imm_T_12) @[ImmGen.scala 37:57]
              io.imm <= _io_imm_T_13 @[ImmGen.scala 37:19]
              skip @[Conditional.scala 39:67]
            else : @[Conditional.scala 39:67]
              node _T_6 = eq(UInt<32>("h06f"), _T) @[Conditional.scala 37:30]
              when _T_6 : @[Conditional.scala 39:67]
                node _io_imm_T_14 = bits(io.ins, 31, 31) @[ImmGen.scala 40:40]
                node _io_imm_T_15 = bits(_io_imm_T_14, 0, 0) @[Bitwise.scala 72:15]
                node io_imm_hi_hi_hi = mux(_io_imm_T_15, UInt<11>("h07ff"), UInt<11>("h00")) @[Bitwise.scala 72:12]
                node io_imm_hi_hi_lo = bits(io.ins, 31, 31) @[ImmGen.scala 40:52]
                node io_imm_hi_lo = bits(io.ins, 19, 12) @[ImmGen.scala 40:63]
                node io_imm_lo_hi_hi = bits(io.ins, 20, 20) @[ImmGen.scala 40:77]
                node io_imm_lo_hi_lo = bits(io.ins, 30, 21) @[ImmGen.scala 40:88]
                node io_imm_lo_hi = cat(io_imm_lo_hi_hi, io_imm_lo_hi_lo) @[Cat.scala 30:58]
                node io_imm_lo_8 = cat(io_imm_lo_hi, UInt<1>("h00")) @[Cat.scala 30:58]
                node io_imm_hi_hi = cat(io_imm_hi_hi_hi, io_imm_hi_hi_lo) @[Cat.scala 30:58]
                node io_imm_hi_8 = cat(io_imm_hi_hi, io_imm_hi_lo) @[Cat.scala 30:58]
                node _io_imm_T_16 = cat(io_imm_hi_8, io_imm_lo_8) @[Cat.scala 30:58]
                node _io_imm_T_17 = asSInt(_io_imm_T_16) @[ImmGen.scala 40:101]
                io.imm <= _io_imm_T_17 @[ImmGen.scala 40:19]
                skip @[Conditional.scala 39:67]
              else : @[Conditional.scala 39:67]
                node _T_7 = eq(UInt<32>("h067"), _T) @[Conditional.scala 37:30]
                when _T_7 : @[Conditional.scala 39:67]
                  node _io_imm_T_18 = bits(io.ins, 31, 31) @[ImmGen.scala 43:40]
                  node _io_imm_T_19 = bits(_io_imm_T_18, 0, 0) @[Bitwise.scala 72:15]
                  node io_imm_hi_9 = mux(_io_imm_T_19, UInt<20>("h0fffff"), UInt<20>("h00")) @[Bitwise.scala 72:12]
                  node io_imm_lo_9 = bits(io.ins, 31, 20) @[ImmGen.scala 43:52]
                  node _io_imm_T_20 = cat(io_imm_hi_9, io_imm_lo_9) @[Cat.scala 30:58]
                  node _io_imm_T_21 = asSInt(_io_imm_T_20) @[ImmGen.scala 43:61]
                  io.imm <= _io_imm_T_21 @[ImmGen.scala 43:19]
                  skip @[Conditional.scala 39:67]
    
  module CU : 
    input clock : Clock
    input reset : Reset
    output io : {flip inst : UInt<32>, rs1 : UInt<5>, rs2 : UInt<5>, rd : UInt<5>, fun3_7 : UInt<4>, WB : UInt<1>, load : UInt<1>, store : UInt<1>, auipc : UInt<32>, jump_pc : UInt<1>}
    
    node _io_rd_T = bits(io.inst, 11, 7) @[CU.scala 20:19]
    io.rd <= _io_rd_T @[CU.scala 20:10]
    node _io_rs1_T = bits(io.inst, 19, 15) @[CU.scala 21:20]
    io.rs1 <= _io_rs1_T @[CU.scala 21:11]
    node _io_rs2_T = bits(io.inst, 24, 20) @[CU.scala 22:20]
    io.rs2 <= _io_rs2_T @[CU.scala 22:11]
    node _io_fun3_7_T = bits(io.inst, 6, 0) @[CU.scala 25:27]
    node _io_fun3_7_T_1 = eq(_io_fun3_7_T, UInt<6>("h033")) @[CU.scala 25:32]
    node io_fun3_7_hi = bits(io.inst, 30, 30) @[CU.scala 25:59]
    node io_fun3_7_lo = bits(io.inst, 14, 12) @[CU.scala 25:71]
    node _io_fun3_7_T_2 = cat(io_fun3_7_hi, io_fun3_7_lo) @[Cat.scala 30:58]
    node _io_fun3_7_T_3 = bits(io.inst, 14, 12) @[CU.scala 25:87]
    node _io_fun3_7_T_4 = mux(_io_fun3_7_T_1, _io_fun3_7_T_2, _io_fun3_7_T_3) @[CU.scala 25:19]
    io.fun3_7 <= _io_fun3_7_T_4 @[CU.scala 25:14]
    node _io_WB_T = bits(io.inst, 6, 0) @[CU.scala 40:24]
    node _io_WB_T_1 = eq(_io_WB_T, UInt<6>("h033")) @[CU.scala 40:29]
    node _io_WB_T_2 = bits(io.inst, 6, 0) @[CU.scala 41:14]
    node _io_WB_T_3 = eq(_io_WB_T_2, UInt<5>("h013")) @[CU.scala 41:19]
    node _io_WB_T_4 = or(_io_WB_T_1, _io_WB_T_3) @[CU.scala 40:45]
    node _io_WB_T_5 = bits(io.inst, 6, 0) @[CU.scala 42:13]
    node _io_WB_T_6 = eq(_io_WB_T_5, UInt<2>("h03")) @[CU.scala 42:18]
    node _io_WB_T_7 = or(_io_WB_T_4, _io_WB_T_6) @[CU.scala 41:35]
    node _io_WB_T_8 = bits(io.inst, 6, 0) @[CU.scala 43:13]
    node _io_WB_T_9 = eq(_io_WB_T_8, UInt<6>("h037")) @[CU.scala 43:18]
    node _io_WB_T_10 = or(_io_WB_T_7, _io_WB_T_9) @[CU.scala 42:35]
    node _io_WB_T_11 = bits(io.inst, 6, 0) @[CU.scala 44:13]
    node _io_WB_T_12 = eq(_io_WB_T_11, UInt<7>("h06f")) @[CU.scala 44:18]
    node _io_WB_T_13 = or(_io_WB_T_10, _io_WB_T_12) @[CU.scala 43:35]
    node _io_WB_T_14 = bits(io.inst, 6, 0) @[CU.scala 45:13]
    node _io_WB_T_15 = eq(_io_WB_T_14, UInt<5>("h017")) @[CU.scala 45:18]
    node _io_WB_T_16 = or(_io_WB_T_13, _io_WB_T_15) @[CU.scala 44:34]
    node _io_WB_T_17 = mux(_io_WB_T_16, UInt<1>("h01"), UInt<1>("h00")) @[CU.scala 40:15]
    io.WB <= _io_WB_T_17 @[CU.scala 40:10]
    node _io_load_T = bits(io.inst, 6, 0) @[CU.scala 49:25]
    node _io_load_T_1 = eq(_io_load_T, UInt<2>("h03")) @[CU.scala 49:30]
    node _io_load_T_2 = mux(_io_load_T_1, UInt<1>("h01"), UInt<1>("h00")) @[CU.scala 49:17]
    io.load <= _io_load_T_2 @[CU.scala 49:12]
    node _io_store_T = bits(io.inst, 6, 0) @[CU.scala 50:26]
    node _io_store_T_1 = eq(_io_store_T, UInt<6>("h023")) @[CU.scala 50:31]
    node _io_store_T_2 = mux(_io_store_T_1, UInt<1>("h01"), UInt<1>("h00")) @[CU.scala 50:18]
    io.store <= _io_store_T_2 @[CU.scala 50:13]
    node io_auipc_hi = mux(UInt<1>("h00"), UInt<20>("h0fffff"), UInt<20>("h00")) @[Bitwise.scala 72:12]
    node io_auipc_lo = bits(io.inst, 31, 12) @[CU.scala 52:41]
    node _io_auipc_T = cat(io_auipc_hi, io_auipc_lo) @[Cat.scala 30:58]
    io.auipc <= _io_auipc_T @[CU.scala 52:14]
    node _io_jump_pc_T = bits(io.inst, 6, 0) @[CU.scala 54:30]
    node _io_jump_pc_T_1 = eq(_io_jump_pc_T, UInt<7>("h067")) @[CU.scala 54:35]
    node _io_jump_pc_T_2 = mux(_io_jump_pc_T_1, UInt<1>("h01"), UInt<1>("h00")) @[CU.scala 54:22]
    io.jump_pc <= _io_jump_pc_T_2 @[CU.scala 54:16]
    
  module Store : 
    input clock : Clock
    input reset : Reset
    output io : {flip adr : UInt<10>, flip fun3 : UInt<3>, flip in : UInt<32>, out : UInt<32>[4], mask : UInt<32>[4]}
    
    io.mask[0] <= UInt<1>("h00") @[Store.scala 20:18]
    io.mask[1] <= UInt<1>("h00") @[Store.scala 21:18]
    io.mask[2] <= UInt<1>("h00") @[Store.scala 22:18]
    io.mask[3] <= UInt<1>("h00") @[Store.scala 23:18]
    io.out[0] <= UInt<1>("h00") @[Store.scala 25:15]
    io.out[1] <= UInt<1>("h00") @[Store.scala 26:15]
    io.out[2] <= UInt<1>("h00") @[Store.scala 27:15]
    io.out[3] <= UInt<1>("h00") @[Store.scala 28:15]
    node _T = eq(io.fun3, UInt<4>("h00")) @[Store.scala 30:16]
    when _T : @[Store.scala 30:29]
      node _T_1 = bits(io.adr, 1, 0) @[Store.scala 31:16]
      node _T_2 = eq(_T_1, UInt<1>("h00")) @[Store.scala 31:22]
      when _T_2 : @[Store.scala 31:31]
        node _io_out_0_T = bits(io.in, 7, 0) @[Store.scala 32:25]
        io.out[0] <= _io_out_0_T @[Store.scala 32:17]
        io.out[1] <= UInt<1>("h00") @[Store.scala 33:17]
        io.out[2] <= UInt<1>("h00") @[Store.scala 34:17]
        io.out[3] <= UInt<1>("h00") @[Store.scala 35:17]
        skip @[Store.scala 31:31]
      node _T_3 = bits(io.adr, 1, 0) @[Store.scala 39:16]
      node _T_4 = eq(_T_3, UInt<1>("h01")) @[Store.scala 39:22]
      when _T_4 : @[Store.scala 39:31]
        io.out[0] <= UInt<1>("h00") @[Store.scala 40:17]
        node _io_out_1_T = bits(io.in, 7, 0) @[Store.scala 41:25]
        io.out[1] <= _io_out_1_T @[Store.scala 41:17]
        io.out[2] <= UInt<1>("h00") @[Store.scala 42:17]
        io.out[3] <= UInt<1>("h00") @[Store.scala 43:17]
        skip @[Store.scala 39:31]
      node _T_5 = bits(io.adr, 1, 0) @[Store.scala 46:16]
      node _T_6 = eq(_T_5, UInt<2>("h02")) @[Store.scala 46:22]
      when _T_6 : @[Store.scala 46:31]
        io.out[0] <= UInt<1>("h00") @[Store.scala 47:17]
        io.out[1] <= UInt<1>("h00") @[Store.scala 48:17]
        node _io_out_2_T = bits(io.in, 7, 0) @[Store.scala 49:25]
        io.out[2] <= _io_out_2_T @[Store.scala 49:17]
        io.out[3] <= UInt<1>("h00") @[Store.scala 50:17]
        skip @[Store.scala 46:31]
      node _T_7 = bits(io.adr, 1, 0) @[Store.scala 53:16]
      node _T_8 = eq(_T_7, UInt<2>("h03")) @[Store.scala 53:22]
      when _T_8 : @[Store.scala 53:31]
        io.out[0] <= UInt<1>("h00") @[Store.scala 54:17]
        io.out[1] <= UInt<1>("h00") @[Store.scala 55:17]
        io.out[2] <= UInt<1>("h00") @[Store.scala 56:17]
        node _io_out_3_T = bits(io.in, 7, 0) @[Store.scala 57:25]
        io.out[3] <= _io_out_3_T @[Store.scala 57:17]
        skip @[Store.scala 53:31]
      skip @[Store.scala 30:29]
    node _T_9 = eq(io.fun3, UInt<4>("h01")) @[Store.scala 61:16]
    when _T_9 : @[Store.scala 61:29]
      node _T_10 = bits(io.adr, 1, 0) @[Store.scala 62:16]
      node _T_11 = eq(_T_10, UInt<1>("h00")) @[Store.scala 62:22]
      when _T_11 : @[Store.scala 62:31]
        node _io_out_0_T_1 = bits(io.in, 7, 0) @[Store.scala 63:25]
        io.out[0] <= _io_out_0_T_1 @[Store.scala 63:17]
        node _io_out_1_T_1 = bits(io.in, 15, 8) @[Store.scala 64:25]
        io.out[1] <= _io_out_1_T_1 @[Store.scala 64:17]
        io.out[2] <= UInt<1>("h00") @[Store.scala 65:17]
        io.out[3] <= UInt<1>("h00") @[Store.scala 66:17]
        skip @[Store.scala 62:31]
      node _T_12 = bits(io.adr, 1, 0) @[Store.scala 69:16]
      node _T_13 = eq(_T_12, UInt<1>("h01")) @[Store.scala 69:22]
      when _T_13 : @[Store.scala 69:31]
        io.out[0] <= UInt<1>("h00") @[Store.scala 70:17]
        node _io_out_1_T_2 = bits(io.in, 7, 0) @[Store.scala 71:25]
        io.out[1] <= _io_out_1_T_2 @[Store.scala 71:17]
        node _io_out_2_T_1 = bits(io.in, 15, 8) @[Store.scala 72:25]
        io.out[2] <= _io_out_2_T_1 @[Store.scala 72:17]
        io.out[3] <= UInt<1>("h00") @[Store.scala 73:17]
        skip @[Store.scala 69:31]
      node _T_14 = bits(io.adr, 1, 0) @[Store.scala 76:16]
      node _T_15 = eq(_T_14, UInt<2>("h02")) @[Store.scala 76:22]
      when _T_15 : @[Store.scala 76:31]
        io.out[0] <= UInt<1>("h00") @[Store.scala 77:17]
        io.out[1] <= UInt<1>("h00") @[Store.scala 78:17]
        node _io_out_2_T_2 = bits(io.in, 7, 0) @[Store.scala 79:25]
        io.out[2] <= _io_out_2_T_2 @[Store.scala 79:17]
        node _io_out_3_T_1 = bits(io.in, 15, 8) @[Store.scala 80:25]
        io.out[3] <= _io_out_3_T_1 @[Store.scala 80:17]
        skip @[Store.scala 76:31]
      node _T_16 = bits(io.adr, 1, 0) @[Store.scala 83:16]
      node _T_17 = eq(_T_16, UInt<2>("h03")) @[Store.scala 83:22]
      when _T_17 : @[Store.scala 83:31]
        node _io_out_0_T_2 = bits(io.in, 15, 8) @[Store.scala 84:25]
        io.out[0] <= _io_out_0_T_2 @[Store.scala 84:17]
        io.out[1] <= UInt<1>("h00") @[Store.scala 85:17]
        io.out[2] <= UInt<1>("h00") @[Store.scala 86:17]
        node _io_out_3_T_2 = bits(io.in, 7, 0) @[Store.scala 87:25]
        io.out[3] <= _io_out_3_T_2 @[Store.scala 87:17]
        skip @[Store.scala 83:31]
      skip @[Store.scala 61:29]
    else : @[Store.scala 90:35]
      node _T_18 = eq(io.fun3, UInt<4>("h02")) @[Store.scala 90:22]
      when _T_18 : @[Store.scala 90:35]
        node _io_out_0_T_3 = bits(io.in, 7, 0) @[Store.scala 91:25]
        io.out[0] <= _io_out_0_T_3 @[Store.scala 91:17]
        node _io_out_1_T_3 = bits(io.in, 15, 8) @[Store.scala 92:25]
        io.out[1] <= _io_out_1_T_3 @[Store.scala 92:17]
        node _io_out_2_T_3 = bits(io.in, 23, 16) @[Store.scala 93:25]
        io.out[2] <= _io_out_2_T_3 @[Store.scala 93:17]
        node _io_out_3_T_3 = bits(io.in, 31, 24) @[Store.scala 94:25]
        io.out[3] <= _io_out_3_T_3 @[Store.scala 94:17]
        skip @[Store.scala 90:35]
    node _T_19 = eq(io.fun3, UInt<4>("h00")) @[Store.scala 98:14]
    when _T_19 : @[Store.scala 98:27]
      node _T_20 = bits(io.adr, 1, 0) @[Store.scala 99:16]
      node _T_21 = eq(_T_20, UInt<1>("h00")) @[Store.scala 99:22]
      when _T_21 : @[Store.scala 99:31]
        io.mask[0] <= UInt<1>("h01") @[Store.scala 100:18]
        io.mask[1] <= UInt<1>("h00") @[Store.scala 101:18]
        io.mask[2] <= UInt<1>("h00") @[Store.scala 102:18]
        io.mask[3] <= UInt<1>("h00") @[Store.scala 103:18]
        skip @[Store.scala 99:31]
      node _T_22 = bits(io.adr, 1, 0) @[Store.scala 106:16]
      node _T_23 = eq(_T_22, UInt<1>("h01")) @[Store.scala 106:22]
      when _T_23 : @[Store.scala 106:31]
        io.mask[0] <= UInt<1>("h00") @[Store.scala 107:18]
        io.mask[1] <= UInt<1>("h01") @[Store.scala 108:18]
        io.mask[2] <= UInt<1>("h00") @[Store.scala 109:18]
        io.mask[3] <= UInt<1>("h00") @[Store.scala 110:18]
        skip @[Store.scala 106:31]
      node _T_24 = bits(io.adr, 1, 0) @[Store.scala 113:16]
      node _T_25 = eq(_T_24, UInt<2>("h02")) @[Store.scala 113:22]
      when _T_25 : @[Store.scala 113:31]
        io.mask[0] <= UInt<1>("h00") @[Store.scala 114:18]
        io.mask[1] <= UInt<1>("h00") @[Store.scala 115:18]
        io.mask[2] <= UInt<1>("h01") @[Store.scala 116:18]
        io.mask[3] <= UInt<1>("h00") @[Store.scala 117:18]
        skip @[Store.scala 113:31]
      node _T_26 = bits(io.adr, 1, 0) @[Store.scala 120:16]
      node _T_27 = eq(_T_26, UInt<2>("h03")) @[Store.scala 120:22]
      when _T_27 : @[Store.scala 120:31]
        io.mask[0] <= UInt<1>("h00") @[Store.scala 121:18]
        io.mask[1] <= UInt<1>("h00") @[Store.scala 122:18]
        io.mask[2] <= UInt<1>("h00") @[Store.scala 123:18]
        io.mask[3] <= UInt<1>("h01") @[Store.scala 124:18]
        skip @[Store.scala 120:31]
      skip @[Store.scala 98:27]
    else : @[Store.scala 126:35]
      node _T_28 = eq(io.fun3, UInt<4>("h01")) @[Store.scala 126:22]
      when _T_28 : @[Store.scala 126:35]
        node _T_29 = bits(io.adr, 1, 0) @[Store.scala 127:16]
        node _T_30 = eq(_T_29, UInt<1>("h00")) @[Store.scala 127:22]
        when _T_30 : @[Store.scala 127:31]
          io.mask[0] <= UInt<1>("h01") @[Store.scala 128:18]
          io.mask[1] <= UInt<1>("h01") @[Store.scala 129:18]
          io.mask[2] <= UInt<1>("h00") @[Store.scala 130:18]
          io.mask[3] <= UInt<1>("h00") @[Store.scala 131:18]
          skip @[Store.scala 127:31]
        node _T_31 = bits(io.adr, 1, 0) @[Store.scala 134:16]
        node _T_32 = eq(_T_31, UInt<1>("h01")) @[Store.scala 134:22]
        when _T_32 : @[Store.scala 134:31]
          io.mask[0] <= UInt<1>("h00") @[Store.scala 135:18]
          io.mask[1] <= UInt<1>("h01") @[Store.scala 136:18]
          io.mask[2] <= UInt<1>("h01") @[Store.scala 137:18]
          io.mask[3] <= UInt<1>("h00") @[Store.scala 138:18]
          skip @[Store.scala 134:31]
        node _T_33 = bits(io.adr, 1, 0) @[Store.scala 141:16]
        node _T_34 = eq(_T_33, UInt<2>("h02")) @[Store.scala 141:22]
        when _T_34 : @[Store.scala 141:31]
          io.mask[0] <= UInt<1>("h00") @[Store.scala 142:18]
          io.mask[1] <= UInt<1>("h00") @[Store.scala 143:18]
          io.mask[2] <= UInt<1>("h01") @[Store.scala 144:18]
          io.mask[3] <= UInt<1>("h01") @[Store.scala 145:18]
          skip @[Store.scala 141:31]
        node _T_35 = bits(io.adr, 1, 0) @[Store.scala 148:16]
        node _T_36 = eq(_T_35, UInt<2>("h03")) @[Store.scala 148:22]
        when _T_36 : @[Store.scala 148:31]
          io.mask[0] <= UInt<1>("h01") @[Store.scala 149:18]
          io.mask[1] <= UInt<1>("h00") @[Store.scala 150:18]
          io.mask[2] <= UInt<1>("h00") @[Store.scala 151:18]
          io.mask[3] <= UInt<1>("h01") @[Store.scala 152:18]
          skip @[Store.scala 148:31]
        skip @[Store.scala 126:35]
      else : @[Store.scala 155:35]
        node _T_37 = eq(io.fun3, UInt<4>("h02")) @[Store.scala 155:22]
        when _T_37 : @[Store.scala 155:35]
          io.mask[0] <= UInt<1>("h01") @[Store.scala 156:18]
          io.mask[1] <= UInt<1>("h01") @[Store.scala 157:18]
          io.mask[2] <= UInt<1>("h01") @[Store.scala 158:18]
          io.mask[3] <= UInt<1>("h01") @[Store.scala 159:18]
          skip @[Store.scala 155:35]
    
  module Load : 
    input clock : Clock
    input reset : Reset
    output io : {flip fun3 : UInt<3>, flip in : UInt<8>[4], out : SInt<32>, flip adr : UInt<2>}
    
    io.out <= asSInt(UInt<1>("h00")) @[Load.scala 21:12]
    node _T = eq(io.fun3, UInt<3>("h00")) @[Load.scala 22:19]
    when _T : @[Load.scala 22:30]
      node _T_1 = eq(io.adr, UInt<1>("h00")) @[Load.scala 23:18]
      when _T_1 : @[Load.scala 23:25]
        node _io_out_T = bits(io.in[0], 7, 7) @[Load.scala 24:41]
        node _io_out_T_1 = bits(_io_out_T, 0, 0) @[Bitwise.scala 72:15]
        node io_out_hi = mux(_io_out_T_1, UInt<24>("h0ffffff"), UInt<24>("h00")) @[Bitwise.scala 72:12]
        node _io_out_T_2 = cat(io_out_hi, io.in[0]) @[Cat.scala 30:58]
        node _io_out_T_3 = asSInt(_io_out_T_2) @[Load.scala 24:56]
        io.out <= _io_out_T_3 @[Load.scala 24:16]
        skip @[Load.scala 23:25]
      else : @[Load.scala 25:30]
        node _T_2 = eq(io.adr, UInt<1>("h01")) @[Load.scala 25:23]
        when _T_2 : @[Load.scala 25:30]
          node _io_out_T_4 = bits(io.in[1], 7, 7) @[Load.scala 26:41]
          node _io_out_T_5 = bits(_io_out_T_4, 0, 0) @[Bitwise.scala 72:15]
          node io_out_hi_1 = mux(_io_out_T_5, UInt<24>("h0ffffff"), UInt<24>("h00")) @[Bitwise.scala 72:12]
          node _io_out_T_6 = cat(io_out_hi_1, io.in[1]) @[Cat.scala 30:58]
          node _io_out_T_7 = asSInt(_io_out_T_6) @[Load.scala 26:56]
          io.out <= _io_out_T_7 @[Load.scala 26:16]
          skip @[Load.scala 25:30]
        else : @[Load.scala 27:30]
          node _T_3 = eq(io.adr, UInt<2>("h02")) @[Load.scala 27:23]
          when _T_3 : @[Load.scala 27:30]
            node _io_out_T_8 = bits(io.in[2], 7, 7) @[Load.scala 28:41]
            node _io_out_T_9 = bits(_io_out_T_8, 0, 0) @[Bitwise.scala 72:15]
            node io_out_hi_2 = mux(_io_out_T_9, UInt<24>("h0ffffff"), UInt<24>("h00")) @[Bitwise.scala 72:12]
            node _io_out_T_10 = cat(io_out_hi_2, io.in[2]) @[Cat.scala 30:58]
            node _io_out_T_11 = asSInt(_io_out_T_10) @[Load.scala 28:56]
            io.out <= _io_out_T_11 @[Load.scala 28:16]
            skip @[Load.scala 27:30]
          else : @[Load.scala 29:30]
            node _T_4 = eq(io.adr, UInt<2>("h03")) @[Load.scala 29:23]
            when _T_4 : @[Load.scala 29:30]
              node _io_out_T_12 = bits(io.in[3], 7, 7) @[Load.scala 30:41]
              node _io_out_T_13 = bits(_io_out_T_12, 0, 0) @[Bitwise.scala 72:15]
              node io_out_hi_3 = mux(_io_out_T_13, UInt<24>("h0ffffff"), UInt<24>("h00")) @[Bitwise.scala 72:12]
              node _io_out_T_14 = cat(io_out_hi_3, io.in[3]) @[Cat.scala 30:58]
              node _io_out_T_15 = asSInt(_io_out_T_14) @[Load.scala 30:56]
              io.out <= _io_out_T_15 @[Load.scala 30:16]
              skip @[Load.scala 29:30]
      skip @[Load.scala 22:30]
    else : @[Load.scala 32:35]
      node _T_5 = eq(io.fun3, UInt<3>("h01")) @[Load.scala 32:24]
      when _T_5 : @[Load.scala 32:35]
        node _T_6 = eq(io.adr, UInt<1>("h00")) @[Load.scala 33:20]
        when _T_6 : @[Load.scala 33:27]
          node io_out_lo = cat(io.in[1], io.in[0]) @[Cat.scala 30:58]
          node _io_out_T_16 = bits(io_out_lo, 15, 15) @[Load.scala 35:37]
          node _io_out_T_17 = bits(_io_out_T_16, 0, 0) @[Bitwise.scala 72:15]
          node io_out_hi_4 = mux(_io_out_T_17, UInt<16>("h0ffff"), UInt<16>("h00")) @[Bitwise.scala 72:12]
          node _io_out_T_18 = cat(io_out_hi_4, io_out_lo) @[Cat.scala 30:58]
          node _io_out_T_19 = asSInt(_io_out_T_18) @[Load.scala 35:49]
          io.out <= _io_out_T_19 @[Load.scala 35:18]
          skip @[Load.scala 33:27]
        else : @[Load.scala 36:33]
          node _T_7 = eq(io.adr, UInt<1>("h01")) @[Load.scala 36:26]
          when _T_7 : @[Load.scala 36:33]
            node io_out_lo_1 = cat(io.in[2], io.in[1]) @[Cat.scala 30:58]
            node _io_out_T_20 = bits(io_out_lo_1, 15, 15) @[Load.scala 38:37]
            node _io_out_T_21 = bits(_io_out_T_20, 0, 0) @[Bitwise.scala 72:15]
            node io_out_hi_5 = mux(_io_out_T_21, UInt<16>("h0ffff"), UInt<16>("h00")) @[Bitwise.scala 72:12]
            node _io_out_T_22 = cat(io_out_hi_5, io_out_lo_1) @[Cat.scala 30:58]
            node _io_out_T_23 = asSInt(_io_out_T_22) @[Load.scala 38:49]
            io.out <= _io_out_T_23 @[Load.scala 38:18]
            skip @[Load.scala 36:33]
          else : @[Load.scala 39:33]
            node _T_8 = eq(io.adr, UInt<2>("h02")) @[Load.scala 39:26]
            when _T_8 : @[Load.scala 39:33]
              node io_out_lo_2 = cat(io.in[3], io.in[2]) @[Cat.scala 30:58]
              node _io_out_T_24 = bits(io_out_lo_2, 15, 15) @[Load.scala 41:37]
              node _io_out_T_25 = bits(_io_out_T_24, 0, 0) @[Bitwise.scala 72:15]
              node io_out_hi_6 = mux(_io_out_T_25, UInt<16>("h0ffff"), UInt<16>("h00")) @[Bitwise.scala 72:12]
              node _io_out_T_26 = cat(io_out_hi_6, io_out_lo_2) @[Cat.scala 30:58]
              node _io_out_T_27 = asSInt(_io_out_T_26) @[Load.scala 41:49]
              io.out <= _io_out_T_27 @[Load.scala 41:18]
              skip @[Load.scala 39:33]
            else : @[Load.scala 42:33]
              node _T_9 = eq(io.adr, UInt<2>("h03")) @[Load.scala 42:26]
              when _T_9 : @[Load.scala 42:33]
                node io_out_lo_3 = cat(io.in[0], io.in[3]) @[Cat.scala 30:58]
                node _io_out_T_28 = bits(io_out_lo_3, 15, 15) @[Load.scala 44:37]
                node _io_out_T_29 = bits(_io_out_T_28, 0, 0) @[Bitwise.scala 72:15]
                node io_out_hi_7 = mux(_io_out_T_29, UInt<16>("h0ffff"), UInt<16>("h00")) @[Bitwise.scala 72:12]
                node _io_out_T_30 = cat(io_out_hi_7, io_out_lo_3) @[Cat.scala 30:58]
                node _io_out_T_31 = asSInt(_io_out_T_30) @[Load.scala 44:49]
                io.out <= _io_out_T_31 @[Load.scala 44:18]
                skip @[Load.scala 42:33]
        skip @[Load.scala 32:35]
      else : @[Load.scala 46:35]
        node _T_10 = eq(io.fun3, UInt<3>("h02")) @[Load.scala 46:24]
        when _T_10 : @[Load.scala 46:35]
          node io_out_lo_4 = cat(io.in[1], io.in[0]) @[Cat.scala 30:58]
          node io_out_hi_8 = cat(io.in[3], io.in[2]) @[Cat.scala 30:58]
          node _io_out_T_32 = cat(io_out_hi_8, io_out_lo_4) @[Cat.scala 30:58]
          node _io_out_T_33 = asSInt(_io_out_T_32) @[Load.scala 47:68]
          io.out <= _io_out_T_33 @[Load.scala 47:16]
          skip @[Load.scala 46:35]
        else : @[Load.scala 48:36]
          node _T_11 = eq(io.fun3, UInt<3>("h04")) @[Load.scala 48:24]
          when _T_11 : @[Load.scala 48:36]
            node _T_12 = eq(io.adr, UInt<1>("h00")) @[Load.scala 49:20]
            when _T_12 : @[Load.scala 49:27]
              node _io_out_T_34 = bits(io.in[0], 7, 7) @[Load.scala 50:42]
              node _io_out_T_35 = bits(_io_out_T_34, 0, 0) @[Bitwise.scala 72:15]
              node io_out_hi_9 = mux(_io_out_T_35, UInt<24>("h0ffffff"), UInt<24>("h00")) @[Bitwise.scala 72:12]
              node _io_out_T_36 = cat(io_out_hi_9, io.in[0]) @[Cat.scala 30:58]
              node _io_out_T_37 = asSInt(_io_out_T_36) @[Load.scala 50:65]
              io.out <= _io_out_T_37 @[Load.scala 50:16]
              skip @[Load.scala 49:27]
            else : @[Load.scala 51:31]
              node _T_13 = eq(io.adr, UInt<1>("h01")) @[Load.scala 51:24]
              when _T_13 : @[Load.scala 51:31]
                node _io_out_T_38 = bits(io.in[1], 7, 7) @[Load.scala 52:42]
                node _io_out_T_39 = bits(_io_out_T_38, 0, 0) @[Bitwise.scala 72:15]
                node io_out_hi_10 = mux(_io_out_T_39, UInt<24>("h0ffffff"), UInt<24>("h00")) @[Bitwise.scala 72:12]
                node _io_out_T_40 = cat(io_out_hi_10, io.in[1]) @[Cat.scala 30:58]
                node _io_out_T_41 = asSInt(_io_out_T_40) @[Load.scala 52:65]
                io.out <= _io_out_T_41 @[Load.scala 52:16]
                skip @[Load.scala 51:31]
              else : @[Load.scala 53:31]
                node _T_14 = eq(io.adr, UInt<2>("h02")) @[Load.scala 53:24]
                when _T_14 : @[Load.scala 53:31]
                  node _io_out_T_42 = bits(io.in[2], 7, 7) @[Load.scala 54:42]
                  node _io_out_T_43 = bits(_io_out_T_42, 0, 0) @[Bitwise.scala 72:15]
                  node io_out_hi_11 = mux(_io_out_T_43, UInt<24>("h0ffffff"), UInt<24>("h00")) @[Bitwise.scala 72:12]
                  node _io_out_T_44 = cat(io_out_hi_11, io.in[2]) @[Cat.scala 30:58]
                  node _io_out_T_45 = asSInt(_io_out_T_44) @[Load.scala 54:65]
                  io.out <= _io_out_T_45 @[Load.scala 54:16]
                  skip @[Load.scala 53:31]
                else : @[Load.scala 55:31]
                  node _T_15 = eq(io.adr, UInt<2>("h03")) @[Load.scala 55:24]
                  when _T_15 : @[Load.scala 55:31]
                    node _io_out_T_46 = bits(io.in[3], 7, 7) @[Load.scala 56:42]
                    node _io_out_T_47 = bits(_io_out_T_46, 0, 0) @[Bitwise.scala 72:15]
                    node io_out_hi_12 = mux(_io_out_T_47, UInt<24>("h0ffffff"), UInt<24>("h00")) @[Bitwise.scala 72:12]
                    node _io_out_T_48 = cat(io_out_hi_12, io.in[3]) @[Cat.scala 30:58]
                    node _io_out_T_49 = asSInt(_io_out_T_48) @[Load.scala 56:65]
                    io.out <= _io_out_T_49 @[Load.scala 56:16]
                    skip @[Load.scala 55:31]
            skip @[Load.scala 48:36]
          else : @[Load.scala 58:36]
            node _T_16 = eq(io.fun3, UInt<3>("h05")) @[Load.scala 58:24]
            when _T_16 : @[Load.scala 58:36]
              node _T_17 = eq(io.adr, UInt<1>("h00")) @[Load.scala 59:21]
              when _T_17 : @[Load.scala 59:28]
                node io_out_lo_5 = cat(io.in[1], io.in[0]) @[Cat.scala 30:58]
                node _io_out_T_50 = bits(io_out_lo_5, 15, 15) @[Load.scala 61:38]
                node _io_out_T_51 = bits(_io_out_T_50, 0, 0) @[Bitwise.scala 72:15]
                node io_out_hi_13 = mux(_io_out_T_51, UInt<16>("h0ffff"), UInt<16>("h00")) @[Bitwise.scala 72:12]
                node _io_out_T_52 = cat(io_out_hi_13, io_out_lo_5) @[Cat.scala 30:58]
                node _io_out_T_53 = asSInt(_io_out_T_52) @[Load.scala 61:58]
                io.out <= _io_out_T_53 @[Load.scala 61:18]
                skip @[Load.scala 59:28]
              else : @[Load.scala 62:33]
                node _T_18 = eq(io.adr, UInt<1>("h01")) @[Load.scala 62:26]
                when _T_18 : @[Load.scala 62:33]
                  node io_out_lo_6 = cat(io.in[2], io.in[1]) @[Cat.scala 30:58]
                  node _io_out_T_54 = bits(io_out_lo_6, 15, 15) @[Load.scala 64:38]
                  node _io_out_T_55 = bits(_io_out_T_54, 0, 0) @[Bitwise.scala 72:15]
                  node io_out_hi_14 = mux(_io_out_T_55, UInt<16>("h0ffff"), UInt<16>("h00")) @[Bitwise.scala 72:12]
                  node _io_out_T_56 = cat(io_out_hi_14, io_out_lo_6) @[Cat.scala 30:58]
                  node _io_out_T_57 = asSInt(_io_out_T_56) @[Load.scala 64:58]
                  io.out <= _io_out_T_57 @[Load.scala 64:18]
                  skip @[Load.scala 62:33]
                else : @[Load.scala 65:33]
                  node _T_19 = eq(io.adr, UInt<2>("h02")) @[Load.scala 65:26]
                  when _T_19 : @[Load.scala 65:33]
                    node io_out_lo_7 = cat(io.in[3], io.in[2]) @[Cat.scala 30:58]
                    node _io_out_T_58 = bits(io_out_lo_7, 15, 15) @[Load.scala 67:38]
                    node _io_out_T_59 = bits(_io_out_T_58, 0, 0) @[Bitwise.scala 72:15]
                    node io_out_hi_15 = mux(_io_out_T_59, UInt<16>("h0ffff"), UInt<16>("h00")) @[Bitwise.scala 72:12]
                    node _io_out_T_60 = cat(io_out_hi_15, io_out_lo_7) @[Cat.scala 30:58]
                    node _io_out_T_61 = asSInt(_io_out_T_60) @[Load.scala 67:58]
                    io.out <= _io_out_T_61 @[Load.scala 67:18]
                    skip @[Load.scala 65:33]
                  else : @[Load.scala 68:33]
                    node _T_20 = eq(io.adr, UInt<2>("h03")) @[Load.scala 68:26]
                    when _T_20 : @[Load.scala 68:33]
                      node io_out_lo_8 = cat(io.in[0], io.in[3]) @[Cat.scala 30:58]
                      node _io_out_T_62 = bits(io_out_lo_8, 15, 15) @[Load.scala 70:38]
                      node _io_out_T_63 = bits(_io_out_T_62, 0, 0) @[Bitwise.scala 72:15]
                      node io_out_hi_16 = mux(_io_out_T_63, UInt<16>("h0ffff"), UInt<16>("h00")) @[Bitwise.scala 72:12]
                      node _io_out_T_64 = cat(io_out_hi_16, io_out_lo_8) @[Cat.scala 30:58]
                      node _io_out_T_65 = asSInt(_io_out_T_64) @[Load.scala 70:58]
                      io.out <= _io_out_T_65 @[Load.scala 70:18]
                      skip @[Load.scala 68:33]
              skip @[Load.scala 58:36]
    
  module TopModule : 
    input clock : Clock
    input reset : UInt<1>
    output io : {}
    
    inst pc of Pc @[TopModule.scala 11:18]
    pc.clock <= clock
    pc.reset <= reset
    inst registerFile of RagFile @[TopModule.scala 13:28]
    registerFile.clock <= clock
    registerFile.reset <= reset
    inst IM of InstMem @[TopModule.scala 14:18]
    IM.clock <= clock
    IM.reset <= reset
    inst Alu of ALU @[TopModule.scala 15:19]
    Alu.clock <= clock
    Alu.reset <= reset
    inst DM of dataMem @[TopModule.scala 17:18]
    DM.clock <= clock
    DM.reset <= reset
    inst IG of ImmGen @[TopModule.scala 18:18]
    IG.clock <= clock
    IG.reset <= reset
    inst cu of CU @[TopModule.scala 19:18]
    cu.clock <= clock
    cu.reset <= reset
    inst str of Store @[TopModule.scala 20:19]
    str.clock <= clock
    str.reset <= reset
    inst ld of Load @[TopModule.scala 21:18]
    ld.clock <= clock
    ld.reset <= reset
    node _pc_io_in_T = bits(IM.io.data_out, 6, 0) @[TopModule.scala 24:33]
    node _pc_io_in_T_1 = eq(_pc_io_in_T, UInt<7>("h06f")) @[TopModule.scala 24:38]
    node _pc_io_in_T_2 = asUInt(IG.io.imm) @[TopModule.scala 24:66]
    node _pc_io_in_T_3 = bits(IM.io.data_out, 6, 0) @[TopModule.scala 25:23]
    node _pc_io_in_T_4 = eq(_pc_io_in_T_3, UInt<7>("h063")) @[TopModule.scala 25:28]
    node _pc_io_in_T_5 = eq(Alu.io.out, asSInt(UInt<2>("h01"))) @[TopModule.scala 26:19]
    node _pc_io_in_T_6 = dshl(IG.io.imm, UInt<1>("h01")) @[TopModule.scala 26:36]
    node _pc_io_in_T_7 = asUInt(_pc_io_in_T_6) @[TopModule.scala 26:43]
    node _pc_io_in_T_8 = mux(_pc_io_in_T_5, _pc_io_in_T_7, UInt<3>("h04")) @[TopModule.scala 26:8]
    node _pc_io_in_T_9 = bits(IM.io.data_out, 6, 0) @[TopModule.scala 27:23]
    node _pc_io_in_T_10 = eq(_pc_io_in_T_9, UInt<7>("h067")) @[TopModule.scala 27:28]
    node _pc_io_in_T_11 = asUInt(Alu.io.out) @[TopModule.scala 27:58]
    node _pc_io_in_T_12 = mux(_pc_io_in_T_10, _pc_io_in_T_11, UInt<3>("h04")) @[TopModule.scala 27:8]
    node _pc_io_in_T_13 = mux(_pc_io_in_T_4, _pc_io_in_T_8, _pc_io_in_T_12) @[TopModule.scala 25:8]
    node _pc_io_in_T_14 = mux(_pc_io_in_T_1, _pc_io_in_T_2, _pc_io_in_T_13) @[TopModule.scala 24:18]
    pc.io.in <= _pc_io_in_T_14 @[TopModule.scala 24:13]
    pc.io.enb <= cu.io.jump_pc @[TopModule.scala 30:14]
    registerFile.io.Wback <= asSInt(UInt<1>("h00")) @[TopModule.scala 31:27]
    registerFile.io.rs1 <= cu.io.rs1 @[TopModule.scala 34:24]
    registerFile.io.rs2 <= cu.io.rs2 @[TopModule.scala 35:24]
    registerFile.io.rd <= cu.io.rd @[TopModule.scala 36:23]
    node _T = bits(cu.io.inst, 6, 0) @[TopModule.scala 37:20]
    node _T_1 = eq(_T, UInt<6>("h033")) @[TopModule.scala 37:25]
    when _T_1 : @[TopModule.scala 37:41]
      registerFile.io.Wback <= Alu.io.out @[TopModule.scala 38:26]
      skip @[TopModule.scala 37:41]
    else : @[TopModule.scala 40:46]
      node _T_2 = bits(cu.io.inst, 6, 0) @[TopModule.scala 40:25]
      node _T_3 = eq(_T_2, UInt<5>("h013")) @[TopModule.scala 40:30]
      when _T_3 : @[TopModule.scala 40:46]
        registerFile.io.Wback <= Alu.io.out @[TopModule.scala 41:26]
        skip @[TopModule.scala 40:46]
      else : @[TopModule.scala 43:46]
        node _T_4 = bits(cu.io.inst, 6, 0) @[TopModule.scala 43:25]
        node _T_5 = eq(_T_4, UInt<7>("h063")) @[TopModule.scala 43:30]
        when _T_5 : @[TopModule.scala 43:46]
          registerFile.io.Wback <= Alu.io.out @[TopModule.scala 44:26]
          skip @[TopModule.scala 43:46]
        else : @[TopModule.scala 46:45]
          node _T_6 = bits(cu.io.inst, 6, 0) @[TopModule.scala 46:24]
          node _T_7 = eq(_T_6, UInt<2>("h03")) @[TopModule.scala 46:29]
          when _T_7 : @[TopModule.scala 46:45]
            registerFile.io.Wback <= ld.io.out @[TopModule.scala 47:26]
            skip @[TopModule.scala 46:45]
          else : @[TopModule.scala 49:46]
            node _T_8 = bits(cu.io.inst, 6, 0) @[TopModule.scala 49:25]
            node _T_9 = eq(_T_8, UInt<6>("h037")) @[TopModule.scala 49:30]
            when _T_9 : @[TopModule.scala 49:46]
              registerFile.io.Wback <= IG.io.imm @[TopModule.scala 50:26]
              skip @[TopModule.scala 49:46]
            else : @[TopModule.scala 52:46]
              node _T_10 = bits(cu.io.inst, 6, 0) @[TopModule.scala 52:25]
              node _T_11 = eq(_T_10, UInt<5>("h017")) @[TopModule.scala 52:30]
              when _T_11 : @[TopModule.scala 52:46]
                node _registerFile_io_Wback_T = asSInt(pc.io.out) @[TopModule.scala 53:41]
                node _registerFile_io_Wback_T_1 = add(_registerFile_io_Wback_T, IG.io.imm) @[TopModule.scala 53:48]
                node _registerFile_io_Wback_T_2 = tail(_registerFile_io_Wback_T_1, 1) @[TopModule.scala 53:48]
                node _registerFile_io_Wback_T_3 = asSInt(_registerFile_io_Wback_T_2) @[TopModule.scala 53:48]
                registerFile.io.Wback <= _registerFile_io_Wback_T_3 @[TopModule.scala 53:26]
                skip @[TopModule.scala 52:46]
              else : @[TopModule.scala 55:46]
                node _T_12 = bits(cu.io.inst, 6, 0) @[TopModule.scala 55:25]
                node _T_13 = eq(_T_12, UInt<7>("h06f")) @[TopModule.scala 55:30]
                when _T_13 : @[TopModule.scala 55:46]
                  node _registerFile_io_Wback_T_4 = asSInt(pc.io.out) @[TopModule.scala 56:41]
                  node _registerFile_io_Wback_T_5 = add(_registerFile_io_Wback_T_4, asSInt(UInt<4>("h04"))) @[TopModule.scala 56:47]
                  node _registerFile_io_Wback_T_6 = tail(_registerFile_io_Wback_T_5, 1) @[TopModule.scala 56:47]
                  node _registerFile_io_Wback_T_7 = asSInt(_registerFile_io_Wback_T_6) @[TopModule.scala 56:47]
                  registerFile.io.Wback <= _registerFile_io_Wback_T_7 @[TopModule.scala 56:26]
                  skip @[TopModule.scala 55:46]
                else : @[TopModule.scala 58:46]
                  node _T_14 = bits(cu.io.inst, 6, 0) @[TopModule.scala 58:25]
                  node _T_15 = eq(_T_14, UInt<7>("h067")) @[TopModule.scala 58:30]
                  when _T_15 : @[TopModule.scala 58:46]
                    node _registerFile_io_Wback_T_8 = asSInt(pc.io.out) @[TopModule.scala 59:40]
                    node _registerFile_io_Wback_T_9 = add(_registerFile_io_Wback_T_8, asSInt(UInt<4>("h04"))) @[TopModule.scala 59:46]
                    node _registerFile_io_Wback_T_10 = tail(_registerFile_io_Wback_T_9, 1) @[TopModule.scala 59:46]
                    node _registerFile_io_Wback_T_11 = asSInt(_registerFile_io_Wback_T_10) @[TopModule.scala 59:46]
                    registerFile.io.Wback <= _registerFile_io_Wback_T_11 @[TopModule.scala 59:26]
                    skip @[TopModule.scala 58:46]
                  else : @[TopModule.scala 60:15]
                    registerFile.io.Wback <= asSInt(UInt<1>("h00")) @[TopModule.scala 61:25]
                    skip @[TopModule.scala 60:15]
    registerFile.io.writeEnable <= cu.io.WB @[TopModule.scala 63:33]
    IM.io.data_in <= asSInt(UInt<1>("h00")) @[TopModule.scala 66:18]
    IM.io.enb <= cu.io.WB @[TopModule.scala 67:14]
    IM.io.address <= pc.io.out @[TopModule.scala 68:18]
    Alu.io.in_A <= registerFile.io.read_rs1 @[TopModule.scala 71:16]
    node _Alu_io_in_B_T = bits(IM.io.data_out, 6, 0) @[TopModule.scala 72:37]
    node _Alu_io_in_B_T_1 = eq(_Alu_io_in_B_T, UInt<6>("h033")) @[TopModule.scala 72:42]
    node _Alu_io_in_B_T_2 = bits(IM.io.data_out, 6, 0) @[TopModule.scala 73:21]
    node _Alu_io_in_B_T_3 = eq(_Alu_io_in_B_T_2, UInt<6>("h023")) @[TopModule.scala 73:26]
    node _Alu_io_in_B_T_4 = or(_Alu_io_in_B_T_1, _Alu_io_in_B_T_3) @[TopModule.scala 72:59]
    node _Alu_io_in_B_T_5 = bits(IM.io.data_out, 6, 0) @[TopModule.scala 74:21]
    node _Alu_io_in_B_T_6 = eq(_Alu_io_in_B_T_5, UInt<7>("h063")) @[TopModule.scala 74:26]
    node _Alu_io_in_B_T_7 = or(_Alu_io_in_B_T_4, _Alu_io_in_B_T_6) @[TopModule.scala 73:43]
    node _Alu_io_in_B_T_8 = bits(IM.io.data_out, 6, 0) @[TopModule.scala 75:24]
    node _Alu_io_in_B_T_9 = eq(_Alu_io_in_B_T_8, UInt<5>("h013")) @[TopModule.scala 75:29]
    node _Alu_io_in_B_T_10 = bits(IM.io.data_out, 6, 0) @[TopModule.scala 76:20]
    node _Alu_io_in_B_T_11 = eq(_Alu_io_in_B_T_10, UInt<2>("h03")) @[TopModule.scala 76:25]
    node _Alu_io_in_B_T_12 = or(_Alu_io_in_B_T_9, _Alu_io_in_B_T_11) @[TopModule.scala 75:46]
    node _Alu_io_in_B_T_13 = bits(IM.io.data_out, 6, 0) @[TopModule.scala 77:20]
    node _Alu_io_in_B_T_14 = eq(_Alu_io_in_B_T_13, UInt<7>("h067")) @[TopModule.scala 77:25]
    node _Alu_io_in_B_T_15 = or(_Alu_io_in_B_T_12, _Alu_io_in_B_T_14) @[TopModule.scala 76:42]
    node _Alu_io_in_B_T_16 = mux(_Alu_io_in_B_T_15, IG.io.imm, asSInt(UInt<1>("h00"))) @[TopModule.scala 75:8]
    node _Alu_io_in_B_T_17 = mux(_Alu_io_in_B_T_7, registerFile.io.read_rs2, _Alu_io_in_B_T_16) @[TopModule.scala 72:21]
    Alu.io.in_B <= _Alu_io_in_B_T_17 @[TopModule.scala 72:16]
    node _Alu_io_opcode_T = bits(cu.io.inst, 6, 0) @[TopModule.scala 78:30]
    Alu.io.opcode <= _Alu_io_opcode_T @[TopModule.scala 78:18]
    Alu.io.alu_Op <= cu.io.fun3_7 @[TopModule.scala 79:18]
    DM.io.mask[0] <= str.io.mask[0] @[TopModule.scala 84:20]
    DM.io.mask[1] <= str.io.mask[1] @[TopModule.scala 85:20]
    DM.io.mask[2] <= str.io.mask[2] @[TopModule.scala 86:20]
    DM.io.mask[3] <= str.io.mask[3] @[TopModule.scala 87:20]
    DM.io.fun3 <= cu.io.fun3_7 @[TopModule.scala 90:17]
    node _DM_io_addr_T = bits(cu.io.inst, 6, 0) @[TopModule.scala 92:34]
    node _DM_io_addr_T_1 = eq(_DM_io_addr_T, UInt<2>("h03")) @[TopModule.scala 92:39]
    node _DM_io_addr_T_2 = asUInt(Alu.io.out) @[TopModule.scala 92:68]
    node _DM_io_addr_T_3 = bits(cu.io.inst, 6, 0) @[TopModule.scala 93:22]
    node _DM_io_addr_T_4 = eq(_DM_io_addr_T_3, UInt<6>("h023")) @[TopModule.scala 93:27]
    node DM_io_addr_hi = bits(cu.io.inst, 31, 25) @[TopModule.scala 93:58]
    node DM_io_addr_lo = bits(cu.io.inst, 11, 7) @[TopModule.scala 93:76]
    node _DM_io_addr_T_5 = cat(DM_io_addr_hi, DM_io_addr_lo) @[Cat.scala 30:58]
    node _DM_io_addr_T_6 = asUInt(registerFile.io.read_rs1) @[TopModule.scala 93:111]
    node _DM_io_addr_T_7 = add(_DM_io_addr_T_5, _DM_io_addr_T_6) @[TopModule.scala 93:83]
    node _DM_io_addr_T_8 = tail(_DM_io_addr_T_7, 1) @[TopModule.scala 93:83]
    node _DM_io_addr_T_9 = mux(_DM_io_addr_T_4, _DM_io_addr_T_8, UInt<1>("h00")) @[TopModule.scala 93:11]
    node _DM_io_addr_T_10 = mux(_DM_io_addr_T_1, _DM_io_addr_T_2, _DM_io_addr_T_9) @[TopModule.scala 92:23]
    DM.io.addr <= _DM_io_addr_T_10 @[TopModule.scala 92:18]
    DM.io.enb <= cu.io.WB @[TopModule.scala 94:17]
    DM.io.writeData[0] <= str.io.out[0] @[TopModule.scala 95:23]
    DM.io.writeData[1] <= str.io.out[1] @[TopModule.scala 95:23]
    DM.io.writeData[2] <= str.io.out[2] @[TopModule.scala 95:23]
    DM.io.writeData[3] <= str.io.out[3] @[TopModule.scala 95:23]
    DM.io.store <= cu.io.store @[TopModule.scala 96:20]
    DM.io.load <= cu.io.load @[TopModule.scala 97:19]
    IG.io.ins <= IM.io.data_out @[TopModule.scala 100:14]
    cu.io.inst <= IM.io.data_out @[TopModule.scala 103:15]
    str.io.fun3 <= cu.io.fun3_7 @[TopModule.scala 106:16]
    node _str_io_in_T = asUInt(registerFile.io.read_rs2) @[TopModule.scala 107:43]
    str.io.in <= _str_io_in_T @[TopModule.scala 107:14]
    node _str_io_adr_T = bits(cu.io.inst, 6, 0) @[TopModule.scala 108:31]
    node _str_io_adr_T_1 = eq(_str_io_adr_T, UInt<2>("h03")) @[TopModule.scala 108:36]
    node _str_io_adr_T_2 = asUInt(Alu.io.out) @[TopModule.scala 108:65]
    node _str_io_adr_T_3 = bits(cu.io.inst, 6, 0) @[TopModule.scala 109:19]
    node _str_io_adr_T_4 = eq(_str_io_adr_T_3, UInt<6>("h023")) @[TopModule.scala 109:24]
    node str_io_adr_hi = bits(cu.io.inst, 31, 25) @[TopModule.scala 109:55]
    node str_io_adr_lo = bits(cu.io.inst, 11, 7) @[TopModule.scala 109:73]
    node _str_io_adr_T_5 = cat(str_io_adr_hi, str_io_adr_lo) @[Cat.scala 30:58]
    node _str_io_adr_T_6 = asUInt(registerFile.io.read_rs1) @[TopModule.scala 109:108]
    node _str_io_adr_T_7 = add(_str_io_adr_T_5, _str_io_adr_T_6) @[TopModule.scala 109:80]
    node _str_io_adr_T_8 = tail(_str_io_adr_T_7, 1) @[TopModule.scala 109:80]
    node _str_io_adr_T_9 = mux(_str_io_adr_T_4, _str_io_adr_T_8, UInt<1>("h00")) @[TopModule.scala 109:8]
    node _str_io_adr_T_10 = mux(_str_io_adr_T_1, _str_io_adr_T_2, _str_io_adr_T_9) @[TopModule.scala 108:20]
    str.io.adr <= _str_io_adr_T_10 @[TopModule.scala 108:15]
    ld.io.fun3 <= cu.io.fun3_7 @[TopModule.scala 117:15]
    ld.io.in[0] <= DM.io.readData[0] @[TopModule.scala 118:13]
    ld.io.in[1] <= DM.io.readData[1] @[TopModule.scala 118:13]
    ld.io.in[2] <= DM.io.readData[2] @[TopModule.scala 118:13]
    ld.io.in[3] <= DM.io.readData[3] @[TopModule.scala 118:13]
    node _ld_io_adr_T = bits(Alu.io.out, 1, 0) @[TopModule.scala 119:27]
    ld.io.adr <= _ld_io_adr_T @[TopModule.scala 119:14]
    
